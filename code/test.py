from numpy import array
import numpy as np
import matplotlib.pyplot as plt
data  =[array([ 0.66327912, -1.        ]), array([ 1.00000001, -0.25234968]), array([0.86281947, 0.99999966]), array([0.43418422, 0.20621165]), array([0.47531862, 0.20712557]), array([0.50902686, 0.98017856]), array([0.28584146, 0.99999992]), array([0.20272578, 0.99999992]), array([2.38820161e-08, 9.99999793e-01]), array([0.10137152, 0.99999701]), array([0.22369837, 0.1479023 ]), array([0.56006768, 0.1169759 ]), array([ 0.53533379, -0.17410655]), array([0.69055513, 0.28817176]), array([0.62958933, 0.0312695 ]), array([0.94420968, 0.23560739]), array([ 0.74119962, -0.13424229]), array([0.75345476, 0.18433225]), array([ 0.73216286, -0.01738163]), array([ 0.65608526, -0.58429419]), array([ 0.56006741, -0.03726762]), array([ 0.50482331, -0.05472793]), array([ 0.56242443, -0.41738523]), array([ 0.44216642, -0.72359701]), array([ 0.06739182, -0.99999991]), array([ 0.32154728, -0.47931009]), array([ 0.17272485, -0.93641184]), array([ 0.47160339, -0.29553004]), array([ 0.60489451, -0.41536795]), array([0.6028489 , 0.10000193]), array([ 0.62534315, -0.07099612]), array([ 0.86088581, -0.43269684]), array([ 0.84321001, -0.19814672]), array([0.89193752, 0.19290353]), array([0.65679461, 0.22386246]), array([0.69604506, 0.0345856 ]), array([ 0.62540269, -0.53537823]), array([0.5214136, 0.9999999]), array([ 0.36784681, -0.20252792]), array([0.31387675, 0.99999995]), array([0.1936149 , 0.99999995]), array([0.20404947, 0.99999995]), array([0.07040529, 0.99999996]), array([0.37574955, 0.99999946]), array([ 0.58753109, -0.21058361]), array([ 0.5179498 , -0.18063492]), array([0.56336605, 0.44236847]), array([ 0.68756628, -0.00513529]), array([0.69067045, 0.22876664]), array([ 0.76331494, -0.10167635]), array([ 0.66221319, -0.04397911]), array([0.80921508, 0.14412036]), array([0.60988763, 0.20444649]), array([0.63104331, 0.9365983 ]), array([0.33298491, 0.37480197]), array([ 0.15628255, -0.17747213]), array([-9.98411555e-09,  7.15544667e-01]), array([-9.92662505e-09,  1.66361584e-01]), array([0.4928643 , 0.99999997]), array([-3.00932697e-09,  9.99999895e-01]), array([-4.68520830e-09,  9.99995461e-01]), array([0.17389901, 0.17530216]), array([0.61238995, 0.5868187 ]), array([ 0.72207296, -0.05014505]), array([ 0.75820547, -0.13344275]), array([ 0.56759753, -0.05516104]), array([0.92895423, 0.0439404 ]), array([ 0.69074654, -0.18239629]), array([0.77166408, 0.03979038]), array([ 0.66969625, -0.29932576]), array([ 0.57720097, -0.34682404]), array([0.53543522, 0.3615344 ]), array([ 0.28003366, -0.83029835]), array([ 0.37135454, -0.9999998 ]), array([ 0.34688305, -0.96951157]), array([ 0.33416899, -0.53370239]), array([ 0.21842638, -0.64100533]), array([ 0.43353024, -0.47360693]), array([ 0.46084629, -0.41821353]), array([ 0.63744406, -0.37799682]), array([0.63032616, 0.40669126]), array([0.75153036, 0.04945566]), array([ 0.81975698, -0.4084017 ]), array([0.73531621, 0.13425607]), array([0.89906837, 0.38289731]), array([0.77424755, 0.1606919 ]), array([ 0.62523601, -0.3417523 ]), array([ 0.66467842, -0.01845239]), array([0.59277829, 0.60709369]), array([0.35543051, 0.99999983]), array([0.12218574, 0.99999993]), array([0.05598713, 0.99999994]), array([0.18484217, 0.99999989]), array([0.25482092, 0.99916158]), array([ 0.4734769 , -0.08560185]), array([0.60313222, 0.17684079]), array([0.67849913, 0.19812322]), array([0.71660297, 0.06274415]), array([0.6585796, 0.0101165]), array([0.73143165, 0.03413837]), array([ 0.84549988, -0.0823579 ]), array([0.57038352, 0.39874351]), array([ 0.76092031, -0.24788795]), array([ 0.53055505, -0.23298274]), array([0.53421736, 0.29538455]), array([0.48416902, 0.9999999 ]), array([0.10469156, 0.99999989]), array([0.0806409 , 0.99999991]), array([0.09950251, 0.99999983]), array([0.09829454, 0.99999988]), array([0.36244658, 0.54468618]), array([ 0.37863898, -0.17323626]), array([ 0.57325208, -0.05566774]), array([0.62614405, 0.17601378]), array([ 0.73016298, -0.3012968 ]), array([0.74484068, 0.35755884]), array([ 0.84148259, -0.21871421]), array([ 0.88334965, -0.20113002]), array([ 0.77184269, -0.12802403]), array([0.76396713, 0.1459638 ]), array([ 0.65112683, -0.16782897]), array([ 0.60019616, -0.00503268]), array([ 0.38705458, -0.68491406]), array([ 0.3507482 , -0.99999995]), array([ 0.3515352 , -0.99999997]), array([ 0.34371801, -0.99999996]), array([ 0.4909477 , -0.59102409]), array([ 0.42027161, -0.15072468]), array([ 0.50230975, -0.28071527]), array([0.55884137, 0.06453098]), array([0.56909704, 0.1984504 ]), array([ 0.75359181, -0.01165915]), array([ 0.76681934, -0.05575921]), array([ 0.70154352, -0.0913782 ]), array([ 0.73057728, -0.38030948]), array([0.71545391, 0.07004162]), array([0.75641629, 0.00219177]), array([0.74608967, 0.83830871]), array([0.62343567, 0.49754731]), array([0.53029498, 0.78353325]), array([0.11657942, 0.99999985]), array([6.37921248e-08, 9.99999888e-01]), array([0.14398156, 0.99999989]), array([0.43853145, 0.84889612]), array([ 0.44483886, -0.10535287]), array([ 0.48742304, -0.45238512]), array([0.65203397, 0.37005955]), array([0.67889533, 0.05336026]), array([ 0.7635026 , -0.22377581]), array([0.65707162, 0.33435982]), array([0.77122817, 0.25349921]), array([ 0.67758083, -0.37641093]), array([0.72227804, 0.4242277 ]), array([0.64850078, 0.72433736]), array([0.16390488, 0.99999998]), array([-9.98607721e-09,  4.71831059e-01]), array([-9.85098473e-09,  2.74101339e-01]), array([0.74364903, 0.12595781]), array([0.07596379, 0.24511679]), array([-6.83331296e-09,  9.99999986e-01]), array([-7.50974585e-10,  9.99999979e-01]), array([0.43937396, 0.6349786 ]), array([ 0.5775476 , -0.03528325]), array([0.62511756, 0.12959478]), array([0.63997318, 0.03916308]), array([ 0.76790689, -0.49525581]), array([0.8856549 , 0.10657562]), array([ 0.69901403, -0.15259241]), array([0.60041245, 0.34015858]), array([ 0.60920206, -0.05115549]), array([ 0.49391509, -0.21730174]), array([ 0.521365  , -0.75433557]), array([ 0.43856762, -0.77850637]), array([ 0.39234767, -0.58680113]), array([ 0.19967373, -0.8866871 ]), array([ 0.32573324, -0.47616241]), array([ 0.25770976, -0.44902884]), array([ 0.44407045, -0.73947108]), array([ 0.48109634, -0.30539373]), array([ 0.70986742, -0.28115553]), array([0.82553257, 0.32936714]), array([0.50268631, 0.23917693]), array([ 0.6346278 , -0.36305884]), array([0.73274237, 0.25922519]), array([ 0.77379732, -0.07309073]), array([ 0.68398603, -0.01197283]), array([ 0.54287233, -0.38106557]), array([ 0.49943474, -0.03999607]), array([ 0.58427764, -0.99999999]), array([ 0.0961728 , -0.99999999]), array([-8.22839888e-09, -1.00000000e+00]), array([-9.0461753e-09, -1.0000000e+00]), array([-9.02558520e-09, -1.00000001e+00]), array([-8.06137536e-09, -1.00000001e+00]), array([ 0.3080581, -1.       ]), array([ 0.95288601, -0.89292589]), array([0.81348887, 0.88472867]), array([0.50261068, 0.44374753]), array([0.66771208, 0.2249188 ]), array([ 0.81739905, -0.29413352]), array([0.77921501, 0.14606962]), array([0.69818632, 0.0465025 ]), array([0.64153078, 0.2525714 ]), array([0.47594366, 0.14481731]), array([0.44809043, 0.05837059]), array([0.42352963, 0.96610163]), array([0.29980682, 0.93144547]), array([0.20678211, 0.99999968]), array([0.08038237, 0.99999983]), array([0.05757856, 0.99999105]), array([0.30650608, 0.03968418]), array([0.43479451, 0.47449441]), array([0.58840766, 0.13470704]), array([ 0.594713  , -0.04383719]), array([ 0.73308643, -0.29141928]), array([0.66901806, 0.07565403]), array([0.72164864, 0.35395235]), array([ 0.89209004, -0.28819613]), array([0.74832272, 0.13853188]), array([ 0.61956472, -0.06911243]), array([0.55233667, 0.01842083]), array([ 0.49746112, -0.99999998]), array([ 0.67003166, -0.82264472]), array([ 0.36206632, -0.37714972]), array([ 0.12890743, -0.99999635]), array([ 0.26746648, -0.99999986]), array([ 0.46769587, -0.63694522]), array([ 0.56220893, -0.16790014]), array([ 0.44767258, -0.14849477]), array([0.56986368, 0.14806748]), array([ 0.66942536, -0.26387237]), array([0.77138388, 0.0917439 ]),
 array([ 0.82406347, -0.03141863]), array([0.79257495, 0.14854885]), array([ 0.7597193, -0.4612491]), array([0.83962357, 0.23873044]), array([0.6645302 , 0.17326892]), array([ 0.67562104, -0.32465175]), array([0.51214853, 0.84083858]), array([0.61083038, 0.77133213])]

data = array(data)
x_values = data[:, 0]
y_values = data[:, 1]
# 计算x_values和y_values的直方图
x_hist, x_bin_edges = np.histogram(x_values, bins=20)
y_hist, y_bin_edges = np.histogram(y_values, bins=20)

# plot
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.bar(x_bin_edges[:-1], x_hist, width=np.diff(x_bin_edges), edgecolor="black")
plt.xlabel("x_values")
plt.ylabel("Frequency")
plt.title("Histogram of x_values")
plt.subplot(1, 2, 2)
plt.bar(y_bin_edges[:-1], y_hist, width=np.diff(y_bin_edges), edgecolor="black")
plt.xlabel("y_values")
plt.ylabel("Frequency")
plt.title("Histogram of y_values")
plt.tight_layout()
plt.show()
# 定义获取代表值的函数
def get_representative_values(hist, bin_edges, num_values):
    # 计算每个bin的权重（基于其频率）
    weights = hist / hist.sum()
    # 根据权重决定每个bin应该有多少代表值
    values_per_bin = np.round(weights * num_values).astype(int)
    # 确保总数为所需的代表值数量（处理四舍五入的问题）
    while values_per_bin.sum() != num_values:
        if values_per_bin.sum() > num_values:
            values_per_bin[np.argmax(values_per_bin)] -= 1
        else:
            values_per_bin[np.argmax(values_per_bin)] += 1
    # 选择代表值
    representative_values = []
    for i in range(len(bin_edges) - 1):
        bin_start = bin_edges[i]
        bin_end = bin_edges[i + 1]
        # 在这个bin内均匀地选择values_per_bin[i]个值
        if values_per_bin[i] > 0:
            bin_values = np.linspace(bin_start, bin_end, values_per_bin[i] + 2)[1:-1]
            representative_values.extend(bin_values)
    return np.array(representative_values)

# 获取x_values和y_values的代表值
x_rep_values = get_representative_values(x_hist, x_bin_edges, 11)
y_rep_values = get_representative_values(y_hist, y_bin_edges, 11)

print("根据频率选择的x_values代表值：", x_rep_values)
print("根据频率选择的y_values代表值：", y_rep_values)